{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/todos.ts","App.tsx","index.tsx"],"names":["id","name","username","email","UserInfo","foundedUser","userId","usersFromServer","find","user","getUser","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","App","useState","todosFromServer","setTodos","setTitle","setUserId","isTitleError","setIsTitleError","isUserError","setIsUserError","getNewTodo","currentTodoList","TodoItems","Math","max","todoItem","action","onSubmit","event","preventDefault","method","onChange","target","value","type","placeholder","onClick","currentTodos","ReactDOM","render","document","getElementById"],"mappings":"8NAAe,GACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2B,OCjDEC,EAA4B,SAAC,GAAgB,IAClDC,EALQ,SAACC,GACf,OAAOC,EAAgBC,MAAK,SAACC,GAAD,OAAUA,EAAKT,KAAOM,KAI9BI,CADmC,EAAbJ,QAG1C,OACE,mBAAGK,UAAU,WAAWC,KAAI,wBAAYP,QAAZ,IAAYA,OAAZ,EAAYA,EAAaF,OAArD,gBACGE,QADH,IACGA,OADH,EACGA,EAAaJ,QCPPY,EAA4B,SAAC,GAEnC,IAAD,IADJC,KAAQC,EACJ,EADIA,MAAOC,EACX,EADWA,UAAWV,EACtB,EADsBA,OAE1B,OACE,mCACE,0BACE,UAAQ,IACRK,UAAWM,IAAW,WAAY,CAChC,sBAAuBD,IAH3B,UAME,oBAAIL,UAAU,kBAAd,SAAiCI,IAEjC,cAAC,EAAD,CAAUT,OAAQA,UCdbY,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,yBAASR,UAAU,WAAnB,SACGQ,EAAMC,KAAI,SAACN,GAAD,OACT,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKd,UCXb,GACb,CACEA,GAAI,EACJe,MAAO,qBACPC,WAAW,EACXV,OAAQ,GAEV,CACEN,GAAI,GACJe,MAAO,qBACPC,WAAW,EACXV,OAAQ,GAEV,CACEN,GAAI,EACJe,MAAO,qCACPC,WAAW,EACXV,OAAQ,ICNCe,EAAM,WACjB,MAA0BC,mBAAiBC,GAA3C,mBAAOJ,EAAP,KAAcK,EAAd,KAEA,EAA0BF,mBAAS,IAAnC,mBAAOP,EAAP,KAAcU,EAAd,KACA,EAA4BH,mBAAS,IAArC,mBAAOhB,EAAP,KAAeoB,EAAf,KAEA,EAAwCJ,oBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAsCN,oBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KAsBMC,EAAa,SAACC,GAAD,MAA8B,CAC/ChC,IALqBiC,EAKHD,EAJXE,KAAKC,IAAL,MAAAD,KAAI,YAAQD,EAAUb,KAAI,SAACgB,GAAD,OAAcA,EAASpC,QAInB,GACrCe,QACAC,WAAW,EACXV,QAASA,GARW,IAAC2B,GAgCvB,OACE,sBAAKtB,UAAU,MAAf,UACE,+CAEA,uBAAM0B,OAAO,aAAaC,SAxCT,SAACC,GACpBA,EAAMC,kBAuC8CC,OAAO,OAAzD,UACE,sBAAK9B,UAAU,QAAf,UACE,uBACE+B,SAvDgB,SAACH,GACzBd,EAASc,EAAMI,OAAOC,OAEtBhB,GAAgB,IAqDRgB,MAAO7B,EACP8B,KAAK,OACL,UAAQ,aACRC,YAAY,0BAEbnB,GAAgB,sBAAMhB,UAAU,QAAhB,qCAGnB,sBAAKA,UAAU,QAAf,UACE,yBACE+B,SA5De,SAACH,GACxBb,EAAUa,EAAMI,OAAOC,OAEvBd,GAAe,IA0DPc,MAAOtC,EACP,UAAQ,aAHV,UAKE,wBAAQsC,MAAM,GAAd,2BACCrC,EAAgBa,KAAI,gBAAGpB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACnB,wBAAiB2C,MAAO5C,EAAxB,SACGC,GADUD,SAKhB6B,GAAe,sBAAMlB,UAAU,QAAhB,qCAGlB,wBAAQoC,QA9CE,WACVzC,GAAUS,IAPdS,GAAS,SAACwB,GAAD,4BAAsBA,GAAtB,CAAoCjB,EAAWiB,QAExDvB,EAAS,IACTC,EAAU,KAQLpB,GACHwB,GAAe,GAGZf,GACHa,GAAgB,IAoCYiB,KAAK,SAAS,UAAQ,eAAhD,oBAKF,cAAC,EAAD,CAAU1B,MAAOA,QCtGvB8B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.c75bf2b6.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../../api/users';\n\ninterface Props {\n  userId: number;\n}\n\nconst getUser = (userId: number) => {\n  return usersFromServer.find((user) => user.id === userId);\n};\n\nexport const UserInfo: React.FC<Props> = ({ userId }) => {\n  const foundedUser = getUser(userId);\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${foundedUser?.email}`}>\n      {foundedUser?.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../Types/Todo';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo: { title, completed, userId },\n}) => {\n  return (\n    <>\n      <article\n        data-id=\"1\"\n        className={classNames('TodoInfo', {\n          'TodoInfo--completed': completed,\n        })}\n      >\n        <h2 className=\"TodoInfo__title\">{title}</h2>\n\n        <UserInfo userId={userId} />\n      </article>\n    </>\n  );\n};\n","import { Todo } from '../../Types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React, { useState } from 'react';\n\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { Todo } from './Types/Todo';\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(todosFromServer);\n\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState('');\n\n  const [isTitleError, setIsTitleError] = useState(false);\n  const [isUserError, setIsUserError] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n\n    setIsTitleError(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(event.target.value);\n\n    setIsUserError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n  };\n\n  const getUsersMaxId = (TodoItems: Todo[]) => {\n    return Math.max(...TodoItems.map((todoItem) => todoItem.id));\n  };\n\n  const getNewTodo = (currentTodoList: Todo[]) => ({\n    id: getUsersMaxId(currentTodoList) + 1,\n    title,\n    completed: false,\n    userId: +userId,\n  });\n\n  const setNewTodo = () => {\n    setTodos((currentTodos) => [...currentTodos, getNewTodo(currentTodos)]);\n\n    setTitle('');\n    setUserId('');\n  };\n\n  const addTodo = () => {\n    if (userId && title) {\n      setNewTodo();\n    }\n\n    if (!userId) {\n      setIsUserError(true);\n    }\n\n    if (!title) {\n      setIsTitleError(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" onSubmit={handleSubmit} method=\"POST\">\n        <div className=\"field\">\n          <input\n            onChange={handleTitleChange}\n            value={title}\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Please, enter a title\"\n          />\n          {isTitleError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <select\n            onChange={handleUserChange}\n            value={userId}\n            data-cy=\"userSelect\"\n          >\n            <option value=\"\">Choose a user</option>\n            {usersFromServer.map(({ id, name }) => (\n              <option key={id} value={id}>\n                {name}\n              </option>\n            ))}\n          </select>\n          {isUserError && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button onClick={addTodo} type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}